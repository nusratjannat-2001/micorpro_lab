
ledb_register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  08000354  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  08000354  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00001354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000358  08000358  00001358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800035c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000360  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000360  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b4a  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000472  00000000  00000000  00002b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00002ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013e  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152b4  00000000  00000000  000032f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fe2  00000000  00000000  000185aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b33f  00000000  00000000  0001a58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000958cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000054c  00000000  00000000  00095910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00095e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800033c 	.word	0x0800033c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800033c 	.word	0x0800033c

0800014c <main>:

void systik_init();
void DelayMillis();
void delays(int time);

int main(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	RCC_APB2ENR |=0x10;
 8000150:	4b0f      	ldr	r3, [pc, #60]	@ (8000190 <main+0x44>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a0e      	ldr	r2, [pc, #56]	@ (8000190 <main+0x44>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
	GPIOC_CRH &=0xFFFFF;
 800015c:	4b0c      	ldr	r3, [pc, #48]	@ (8000190 <main+0x44>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a0b      	ldr	r2, [pc, #44]	@ (8000190 <main+0x44>)
 8000162:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000166:	6013      	str	r3, [r2, #0]
	GPIOC_CRH |=0x300000;
 8000168:	4b09      	ldr	r3, [pc, #36]	@ (8000190 <main+0x44>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a08      	ldr	r2, [pc, #32]	@ (8000190 <main+0x44>)
 800016e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000172:	6013      	str	r3, [r2, #0]

	systik_init();
 8000174:	f000 f80e 	bl	8000194 <systik_init>

	while(1){

		GPIOC_ODR ^=0x2000;
 8000178:	4b05      	ldr	r3, [pc, #20]	@ (8000190 <main+0x44>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4a04      	ldr	r2, [pc, #16]	@ (8000190 <main+0x44>)
 800017e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000182:	6013      	str	r3, [r2, #0]
		delays(10);
 8000184:	200a      	movs	r0, #10
 8000186:	f000 f835 	bl	80001f4 <delays>
		GPIOC_ODR ^=0x2000;
 800018a:	bf00      	nop
 800018c:	e7f4      	b.n	8000178 <main+0x2c>
 800018e:	bf00      	nop
 8000190:	40021018 	.word	0x40021018

08000194 <systik_init>:


	}
}

void systik_init(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0


	SysTick_CTRL = 0;
 8000198:	4b09      	ldr	r3, [pc, #36]	@ (80001c0 <systik_init+0x2c>)
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
	SysTick_LOAD = 0x00ffffff;
 800019e:	4b08      	ldr	r3, [pc, #32]	@ (80001c0 <systik_init+0x2c>)
 80001a0:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80001a4:	601a      	str	r2, [r3, #0]
	SysTick_VAL = 0;
 80001a6:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <systik_init+0x2c>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
	SysTick_CTRL |= 5;
 80001ac:	4b04      	ldr	r3, [pc, #16]	@ (80001c0 <systik_init+0x2c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a03      	ldr	r2, [pc, #12]	@ (80001c0 <systik_init+0x2c>)
 80001b2:	f043 0305 	orr.w	r3, r3, #5
 80001b6:	6013      	str	r3, [r2, #0]

}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	40021018 	.word	0x40021018

080001c4 <DelayMillis>:
void DelayMillis(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	SysTick_LOAD = 72000 - 1;
 80001c8:	4b08      	ldr	r3, [pc, #32]	@ (80001ec <DelayMillis+0x28>)
 80001ca:	4a09      	ldr	r2, [pc, #36]	@ (80001f0 <DelayMillis+0x2c>)
 80001cc:	601a      	str	r2, [r3, #0]
	SysTick_VAL = 0;
 80001ce:	4b07      	ldr	r3, [pc, #28]	@ (80001ec <DelayMillis+0x28>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
	while((SysTick_CTRL & 0x10000) == 0);
 80001d4:	bf00      	nop
 80001d6:	4b05      	ldr	r3, [pc, #20]	@ (80001ec <DelayMillis+0x28>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d0f9      	beq.n	80001d6 <DelayMillis+0x12>

}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40021018 	.word	0x40021018
 80001f0:	0001193f 	.word	0x0001193f

080001f4 <delays>:

void delays(int time){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]

int i;
	for(i=0;i<time;i++){
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	e004      	b.n	800020c <delays+0x18>
		DelayMillis();
 8000202:	f7ff ffdf 	bl	80001c4 <DelayMillis>
	for(i=0;i<time;i++){
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	3301      	adds	r3, #1
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fa      	ldr	r2, [r7, #12]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	429a      	cmp	r2, r3
 8000212:	dbf6      	blt.n	8000202 <delays+0xe>

	}

}
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}

0800021e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800021e:	b480      	push	{r7}
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000222:	bf00      	nop
 8000224:	e7fd      	b.n	8000222 <NMI_Handler+0x4>

08000226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000226:	b480      	push	{r7}
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800022a:	bf00      	nop
 800022c:	e7fd      	b.n	800022a <HardFault_Handler+0x4>

0800022e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000232:	bf00      	nop
 8000234:	e7fd      	b.n	8000232 <MemManage_Handler+0x4>

08000236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000236:	b480      	push	{r7}
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800023a:	bf00      	nop
 800023c:	e7fd      	b.n	800023a <BusFault_Handler+0x4>

0800023e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800023e:	b480      	push	{r7}
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000242:	bf00      	nop
 8000244:	e7fd      	b.n	8000242 <UsageFault_Handler+0x4>

08000246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr

08000252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000252:	b480      	push	{r7}
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800025e:	b480      	push	{r7}
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	bc80      	pop	{r7}
 8000268:	4770      	bx	lr

0800026a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800026e:	f000 f82f 	bl	80002d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}

08000276 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
	...

08000284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000284:	f7ff fff7 	bl	8000276 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000288:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800028a:	490c      	ldr	r1, [pc, #48]	@ (80002bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800028c:	4a0c      	ldr	r2, [pc, #48]	@ (80002c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000290:	e002      	b.n	8000298 <LoopCopyDataInit>

08000292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000296:	3304      	adds	r3, #4

08000298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800029c:	d3f9      	bcc.n	8000292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029e:	4a09      	ldr	r2, [pc, #36]	@ (80002c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002a0:	4c09      	ldr	r4, [pc, #36]	@ (80002c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a4:	e001      	b.n	80002aa <LoopFillZerobss>

080002a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a8:	3204      	adds	r2, #4

080002aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ac:	d3fb      	bcc.n	80002a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002ae:	f000 f821 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b2:	f7ff ff4b 	bl	800014c <main>
  bx lr
 80002b6:	4770      	bx	lr
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002c0:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002c8:	20000024 	.word	0x20000024

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002d4:	4b05      	ldr	r3, [pc, #20]	@ (80002ec <HAL_IncTick+0x1c>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	461a      	mov	r2, r3
 80002da:	4b05      	ldr	r3, [pc, #20]	@ (80002f0 <HAL_IncTick+0x20>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	4a03      	ldr	r2, [pc, #12]	@ (80002f0 <HAL_IncTick+0x20>)
 80002e2:	6013      	str	r3, [r2, #0]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	20000000 	.word	0x20000000
 80002f0:	20000020 	.word	0x20000020

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	2600      	movs	r6, #0
 80002f8:	4d0c      	ldr	r5, [pc, #48]	@ (800032c <__libc_init_array+0x38>)
 80002fa:	4c0d      	ldr	r4, [pc, #52]	@ (8000330 <__libc_init_array+0x3c>)
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	f000 f81a 	bl	800033c <_init>
 8000308:	2600      	movs	r6, #0
 800030a:	4d0a      	ldr	r5, [pc, #40]	@ (8000334 <__libc_init_array+0x40>)
 800030c:	4c0a      	ldr	r4, [pc, #40]	@ (8000338 <__libc_init_array+0x44>)
 800030e:	1b64      	subs	r4, r4, r5
 8000310:	10a4      	asrs	r4, r4, #2
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
