STM32F103C8T6

shoiab

#include "stm32f10x.h"
#include "gp_drive.h"


void systik_init();
void DelayMillis();
void delays(int time);

int main(){
	
	init_GP(PA, 0, IN, I_PP);
	init_GP(PC, 13, OUT10, O_GP_PP);
	systik_init();
	
	while(1){
		delays(1000);
		toggle(PC, 13);
		
	}
}

void systik_init(){
	
	
	SysTick->CTRL = 0;
	SysTick->LOAD = 0x00ffffff;
	SysTick->VAL = 0;
	SysTick->CTRL |= 5;
	
}
void DelayMillis(){
	SysTick->LOAD = 0x1A5E0 - 1;
	SysTick->VAL = 0;
	while((SysTick->CTRL & 0x10000) == 0);
	
}

void delays(int time){

int i;
	for(i=0;i<time;i++){
		DelayMillis();
	
	}

}

hasin

#include "main.h"

// Define base addresses and offsets
#define RCC_BASE        0x40021000
#define GPIOC_BASE      0x40011000
#define TIM2_BASE       0x40000000

#define RCC_APB1ENR     (*(volatile unsigned long *)(RCC_BASE + 0x1C))
#define RCC_APB2ENR     (*(volatile unsigned long *)(RCC_BASE + 0x18))

#define GPIOC_CRH       (*(volatile unsigned long *)(GPIOC_BASE + 0x04))
#define GPIOC_ODR       (*(volatile unsigned long *)(GPIOC_BASE + 0x0C))

#define TIM2_CR1        (*(volatile unsigned long *)(TIM2_BASE + 0x00))
#define TIM2_SR         (*(volatile unsigned long *)(TIM2_BASE + 0x10))
#define TIM2_PSC        (*(volatile unsigned long *)(TIM2_BASE + 0x28))
#define TIM2_ARR        (*(volatile unsigned long *)(TIM2_BASE + 0x2C))



int main() {
	RCC_APB2ENR |= (1 << 4);  // Enable GPIOC clock
	RCC_APB1ENR |= (1 << 0);  // Enable TIM2 clock

	//configuration of GPIOC for pc13 pin.
	GPIOC_CRH &= ~(0x3 << 20);  // GPIOC_CRH register 21th & 20th are MODE13 bits for PC13.
	GPIOC_CRH |= (1 << 20);     // Set MODE to 01 for PC13 pin that causes LED to be blinked.


	 TIM2_PSC = 7999;  // Prescaler value (0 - 7999 = 8000). Divided HSI(8MHz) by 8000 to get TIM2 clock 1000 Hz.
	 TIM2_ARR = 999;   // (0-499) Timer counter count from 0 to 1000 in 1000Hz TIM2 clock. Then count again 0 -499.
	 	 	 	 	   // So for every 1 second Timer clock counter to 0.
	 TIM2_CR1 |= (1 << 0);  // Enable the timer counter by setting TIM2_CR1 register's 0th bit to 1.


    while (1) {
        if (TIM2_SR & (1 << 0)) {  //TIM2_SR 0th bit(called update interrupt flag bit) is automatically set by 1 when timer counter reach TIM2_ARR value
        						   //i.e 999.
            TIM2_SR &= ~(1 << 0);  // Reset TIM2_SR 0th by 0.
            // Toggle the LED
            GPIOC_ODR ^= (1 << 13); //when GPIOC_ODR register's 13th bit 1 then LED turns on by the use of pc13 pin.
        }
    }

    return 0;
}


main:

///* USER CODE BEGIN Header */
///**
//  ******************************************************************************
//  * @file           : main.c
//  * @brief          : Main program body
//  ******************************************************************************
//  * @attention
//  *
//  * Copyright (c) 2024 STMicroelectronics.
//  * All rights reserved.
//  *
//  * This software is licensed under terms that can be found in the LICENSE file
//  * in the root directory of this software component.
//  * If no LICENSE file comes with this software, it is provided AS-IS.
//  *
//  ******************************************************************************
//  */
///* USER CODE END Header */
///* Includes ------------------------------------------------------------------*/
//#include "main.h"
//#include "gpio.h"
//
///* Private includes ----------------------------------------------------------*/
///* USER CODE BEGIN Includes */
//
///* USER CODE END Includes */
//
///* Private typedef -----------------------------------------------------------*/
///* USER CODE BEGIN PTD */
//
///* USER CODE END PTD */
//
///* Private define ------------------------------------------------------------*/
///* USER CODE BEGIN PD */
//
///* USER CODE END PD */
//
///* Private macro -------------------------------------------------------------*/
///* USER CODE BEGIN PM */
//
///* USER CODE END PM */
//
///* Private variables ---------------------------------------------------------*/
//
///* USER CODE BEGIN PV */
//
///* USER CODE END PV */
//
///* Private function prototypes -----------------------------------------------*/
//void SystemClock_Config(void);
///* USER CODE BEGIN PFP */
//
///* USER CODE END PFP */
//
///* Private user code ---------------------------------------------------------*/
///* USER CODE BEGIN 0 */
//
///* USER CODE END 0 */
//
///**
//  * @brief  The application entry point.
//  * @retval int
//  */
//int main(void)
//{
//
//  /* USER CODE BEGIN 1 */
//
//  /* USER CODE END 1 */
//
//  /* MCU Configuration--------------------------------------------------------*/
//
//  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
//  HAL_Init();
//
//  /* USER CODE BEGIN Init */
//
//  /* USER CODE END Init */
//
//  /* Configure the system clock */
//  SystemClock_Config();
//
//  /* USER CODE BEGIN SysInit */
//
//  /* USER CODE END SysInit */
//
//  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  /* USER CODE BEGIN 2 */
//
//  /* USER CODE END 2 */
//
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
//  while (1)
//  {
//	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
//	  HAL_Delay(2000);
//	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
//	  HAL_Delay(2000);
//    /* USER CODE END WHILE */
//
//    /* USER CODE BEGIN 3 */
//  }
//  /* USER CODE END 3 */
//}
//
///**
//  * @brief System Clock Configuration
//  * @retval None
//  */
//void SystemClock_Config(void)
//{
//  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
//  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
//
//  /** Initializes the RCC Oscillators according to the specified parameters
//  * in the RCC_OscInitTypeDef structure.
//  */
//  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
//  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
//  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
//  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
//  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
//  {
//    Error_Handler();
//  }
//
//  /** Initializes the CPU, AHB and APB buses clocks
//  */
//  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
//                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
//  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
//  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
//  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
//  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
//
//  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
//  {
//    Error_Handler();
//  }
//}
//
///* USER CODE BEGIN 4 */
//
///* USER CODE END 4 */
//
///**
//  * @brief  This function is executed in case of error occurrence.
//  * @retval None
//  */
//void Error_Handler(void)
//{
//  /* USER CODE BEGIN Error_Handler_Debug */
//  /* User can add his own implementation to report the HAL error return state */
//  __disable_irq();
//  while (1)
//  {
//  }
//  /* USER CODE END Error_Handler_Debug */
//}
//
//#ifdef  USE_FULL_ASSERT
///**
//  * @brief  Reports the name of the source file and the source line number
//  *         where the assert_param error has occurred.
//  * @param  file: pointer to the source file name
//  * @param  line: assert_param error line source number
//  * @retval None
//  */
//void assert_failed(uint8_t *file, uint32_t line)
//{
//  /* USER CODE BEGIN 6 */
//  /* User can add his own implementation to report the file name and line number,
//     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
//  /* USER CODE END 6 */
//}
//#endif /* USE_FULL_ASSERT */



#include "main.h"
int main()
{
RCC->APB2ENR |=0x10;
GPIOC->CRH &=0x0FFFFF;
GPIOC->CRH |=0x300000;
while(1)
{
GPIOC->ODR |=0x2000;
for(int i=0;i<1000000;i++){
}
GPIOC->ODR &=0;
for(int i=0;i<1000000;i++){
}
}
}



arif:
#define RCC_BASE               0x40021000
#define RCC_APB2ENR            *(volatile unsigned int *)(RCC_BASE + 0x18)
#define RCC_APB1ENR            *(volatile unsigned int *)(RCC_BASE + 0x1C)

#define GPIOC_BASE             0x40011000
#define GPIOC_CRH              *(volatile unsigned int *)(GPIOC_BASE + 0x04)
#define GPIOC_BSRR             *(volatile unsigned int *)(GPIOC_BASE + 0x10)

#define TIM2                    0x40000000
#define TIM2_PSC               *(volatile unsigned int *)(TIM2 + 0x28)
#define TIM2_ARR               *(volatile unsigned int *)(TIM2 + 0x2C)
#define TIM2_SR                *(volatile unsigned int *)(TIM2 + 0x10)
#define TIM2_CR1               *(volatile unsigned int *)(TIM2 + 0x00)

#define DELAY                  100000

void delay(int count){
  TIM2_PSC = 8000 - 1;
  TIM2_ARR = count - 1;
  TIM2_SR &= ~(1);
  TIM2_CR1 |= 1;

  while (!(TIM2_SR & 1));

  TIM2_CR1 &= ~(1);
}


int main(){
  //enable RCC for GPIO port C
  RCC_APB2ENR |= (1 << 4);

  //configure mode for pc13
  GPIOC_CRH &= ~(0xF << 20); //clear the bit number 20, 21, 22, 23
  GPIOC_CRH |= (1 << 20);
  GPIOC_CRH |= (1 << 21);


  //configure the category of input output
//  GPIOC_CRH &= ~(1 << 22);
//  GPIOC_CRH &= ~(1 << 23);

  RCC_APB1ENR |= 1;

  while(1){
    GPIOC_BSRR |= (1 << 13);

//    for(int i = 0; i < DELAY; i++){}
    delay(1000);

    GPIOC_BSRR |= (1 << 29);

//    for(int i = 0; i < DELAY; i++){}
    delay(1000);
  }

  return 0;
}


rules for run:
write code-save-debug-debug as stm32 c/c++--debug configuration-debugger-
debug pobe(st-link open ocd)-show genrator option-reset mode(software system reset)
-apply-debug-run 

reference menual:
chap3-memory map-table 3
chap8-8.3-8.3.7
chap9-9.2

cortex:
chap4-4.5

data sheet:
page 11 fig 1